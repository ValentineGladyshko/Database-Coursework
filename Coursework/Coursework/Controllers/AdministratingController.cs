using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Coursework.Models;
using System.Data;
using System.Data.SqlClient;

namespace Coursework.Controllers
{
    public class AdministratingController : Controller
    {
        struct MyAlp
        {
            public int int1 { get; set; }
            public int int2 { get; set; }
        }
        public DateTime RandomDay(Random gen)
        {
            DateTime start = new DateTime(2010, 1, 1);
            int range = (DateTime.Today - start).Days;
            return start.AddDays(gen.Next(range));
        }

        public DateTime RandomDay(Random gen, DateTime start)
        {
            int range = (DateTime.Today - start).Days;
            if (range > 30)
                range = 30;
            return start.AddDays(gen.Next(range));
        }

        public DateTime RandomDay(Random gen, DateTime start, int qw)
        {
            int range = (DateTime.Today - start).Days + 30;
            if (range > 30)
                range = 30;
            return start.AddDays(gen.Next(range));
        }

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult Success()
        {
            return PartialView();
        }

        public ActionResult Error()
        {
            return PartialView();
        }

        public ActionResult CreateAlpinist()
        {
            ViewBag.MyID = false;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateAlpinist([Bind(Include = "AlpinistBaseID,FirstName,LastName,Phone,")] Alpinist alpinist)
        {
            if (ModelState.IsValid)
            {
                ViewBag.MyID = true;
                string queryString = "INSERT INTO [Alpinists] ([FirstName], [LastName], [Phone])" +
                    "VALUES" +
                    "	('" + alpinist.FirstName +
                    "', '" + alpinist.LastName + "', '" + alpinist.Phone + "')" +
                    "INSERT INTO [AlpinistsList] ([AlpinistID], [AlpinistBaseID])" +
                    "VALUES(" +
                    "	(" +
                    "	SELECT TOP(1) [AlpinistID]     " +
                    "	FROM [Coursework].[dbo].[Alpinists]" +
                    "	ORDER BY [AlpinistID] DESC" +
                    "	), " + alpinist.AlpinistBaseID + ")";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                command.ExecuteNonQuery();
                connection.Close();
                return View(alpinist);
            }
            ViewBag.MyID = false;
            return View(alpinist);
        }

        public ActionResult CreateFoodOrder()
        {
            ViewBag.MyID = false;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateFoodOrder([Bind(Include = "AlpinistID,FoodTypeID,Date")] FoodOrder foodOrder)
        {
            if (ModelState.IsValid)
            {
                ViewBag.MyID = true;
                string queryString = "INSERT INTO [FoodOrders] ([AlpinistID], [FoodTypeID], [Date])" +
                    "VALUES" +
                    "	(" + foodOrder.AlpinistID + "," + foodOrder.FoodTypeID + 
                    ", '" + foodOrder.Date.ToString("yyyy-MM-dd") + "')";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                command.ExecuteNonQuery();
                connection.Close();
                return View(foodOrder);
            }
            ViewBag.MyID = false;
            return View(foodOrder);
        }

        public ActionResult ChooseAlpinistHouse()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public RedirectToRouteResult ChooseAlpinistHouse(MyInt myInt)
        {
            FoodOrder houseOrder = new FoodOrder();
            houseOrder.AlpinistID = myInt.ID;
            return RedirectToAction("CreateHouseOrder", houseOrder);
        }

        public ActionResult CreateHouseOrder(FoodOrder houseOrder)
        {
            ViewBag.MyID = false;
            HouseOrder houseOrder1 = new HouseOrder();
            houseOrder1.AlpinistID = houseOrder.AlpinistID;
            return View(houseOrder1);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateHouseOrder([Bind(Include = "AlpinistID,HouseID,DateStart,DateEnd")] HouseOrder houseOrder)
        {
            if (ModelState.IsValid)
            {
                ViewBag.MyID = true;
                string queryString = "INSERT INTO [HouseOrders] ([AlpinistID], [HouseID], [DateStart], [DateEnd])" +
                    "VALUES" +
                    "	(" + houseOrder.AlpinistID + "," + houseOrder.HouseID +
                    ", '" + houseOrder.DateStart.ToString("yyyy-MM-dd") + "', '" + houseOrder.DateEnd.ToString("yyyy-MM-dd") + "')";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                command.ExecuteNonQuery();
                connection.Close();
                return View(houseOrder);
            }
            ViewBag.MyID = false;
            return View(houseOrder);
        }

        public ActionResult ChooseAlpinistWalk()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public RedirectToRouteResult ChooseAlpinistWalk(MyInt myInt)
        {
            FoodOrder walk = new FoodOrder();
            walk.AlpinistID = myInt.ID;
            return RedirectToAction("CreateWalk", walk);
        }

        public ActionResult CreateWalk(FoodOrder walk)
        {
            ViewBag.MyID = false;
            Walk walk1 = new Walk();
            walk1.AlpinistID = walk.AlpinistID;
            return View(walk1);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateWalk([Bind(Include = "AlpinistID,RouteID,DateStart,DateEnd")] Walk walk)
        {
            if (ModelState.IsValid)
            {
                ViewBag.MyID = true;
                string queryString = "INSERT INTO [Walks] ([AlpinistID], [RouteID], [DateStart], [DateEnd])" +
                    "VALUES" +
                    "	(" + walk.AlpinistID + "," + walk.RouteID +
                    ", '" + walk.DateStart.ToString("yyyy-MM-dd") + "', '" + walk.DateEnd.ToString("yyyy-MM-dd") + "')";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                command.ExecuteNonQuery();
                connection.Close();
                return View(walk);
            }
            ViewBag.MyID = false;
            return View(walk);
        }

        public ActionResult GenerateAlpinists()
        {
            ViewBag.MyID = 0;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GenerateAlpinists([Bind(Include = "ID")] MyInt myInt)
        {
            if (ModelState.IsValid && myInt.ID > 0 && myInt.ID < 100000)
            {
                string[] MaleNames = new string[] { "Яків", "Генадій", "Омелян", "Олександр", "Олег", "Саввелій", "Гавриїл", "Арсеній", "Лев", "Пімен", "Лука", "Евстигней", "Фадей", "Адам", "Фелікс", "Авдей", "Клавдій", "Всеволод", "Мечислав", "Євлампій", "Кондрат", "Самуїл", "Богдан", "Модест", "Іпатій", "Рубен", "Тит", "Рюрик", "Савелій", "Антон", "Артем", "Агафон", "Борис", "Феофан", "Іван", "Мартьян", "Лаврентій", "Валер'ян", "Фока", "Яким", "Еміль", "Касьян", "Никифор", "Антип", "Василь", "Станіслав", "Пахом", "Іполит", "Борислав", "Ілля", "Степан", "Роман", "Мойсей", "Андрій", "Фома", "Артур", "Кім", "Михайло", "Варфоломій", "Іраклій", "Кіндрат", "Артем", "Йосип", "Сигізмунд", "Ізмаїл", "Нестор", "Агап", "Елизар", "Віктор", "Платон", "Онисим", "Лук'ян", "Никон", "Кирило", "Вацлав", "Терентій", "Олексій", "Валентин", "Юлій", "Мефодій", "Денис", "Федот", "Вадим", "Юхим", "Євген", "Кузьма", "Анатолій", "Еммануїл", "Онуфрій", "Феоктист", "Аристарх", "Єрофій", "Ігнатій", "Севастян", "Ернест", "Мирон", "Єфрем", "Данило", "Ростислав", "Іларіон", "Єгор", "Осип", "Петро", "Полікарп", "Тарас", "Зіновій", "Кир", "Мстислав", "Всеслав", "Георгій", "В'ячеслав", "Павло", "Филимон", "Григорій", "Євграф", "Костянтин", "Никанор", "Прохор", "Ян", "Семен", "Філіп", "Архип", "Сократ", "Лавр", "Сидор", "Казимир", "Данила", "Тимофій", "Федосій", "Марк", "Інокентій", "Короп", "Віталій", "Едуард", "Данило", "Серафим", "Веремій", "Гнат", "Радислав", "Ернст", "Потап", "Семен", "Владислав", "Герасим", "Макар", "Євдоким", "Матвій", "Назар", "Владилен", "Миколай", "Владлен", "Артемій", "Ізяслав", "Дмитро", "Панкратій", "Андріян", "Радіон", "Святослав", "Гліб", "Прокіп", "Карл", "Вікентій", "Броніслав", "Тимур", "Харитон", "Парфен", "Аскольд", "Максимильян", "Максим", "Ярослав", "Трохим", "Самсон", "Михей", "Дементій", "Мирослав", "Андрон", "Мир", "Федір", "Прокл", "Гаврило", "Герман", "Дем'ян", "Юліан", "Тихон", "Єлисей", "Чеслав", "Адріан", "Веніамін", "Давид", "Остап", "Віссаріон", "Овсій", "Якуб", "Ігор", "Валентин", "Натан", "Валерій", "Микита", "Венедикт", "Ульян", "Леонід", "Соломон", "Порфирій", "Аркадій", "Володимир", "Капітон", "Юрій", "Руслан", "Захар", "Мартин", "Родіон", "Леондій", "Сергій", "Афанасій", "Ернест", "Парфен", "Марк", "Осип", "Владислав", "Юлій", "Тит", "Гавриїл", "Яків", "Семен", "Вадим", "Єгор", "Лука", "Платон", "Миколай", "Кіндрат", "Сидор", "Касьян", "Броніслав", "Мирослав", "Афанасій", "Руслан", "Валентин", "Харитон", "Тарас", "Остап", "Радіон", "Вацлав", "Іраклій", "Фока", "Ігор", "Костянтин", "Онуфрій", "Кім", "Овсій", "Андрій", "Віктор", "Андріян", "Кузьма", "Ульян", "Всеволод", "Карл", "Мир", "Ігнатій", "Казимир", "Ізмаїл", "Никон", "Аскольд", "Павло", "Матвій", "Іполит", "Никифор", "Фелікс", "Федосій", "Фома", "Борислав", "Леондій", "Віссаріон", "Самуїл", "Борис", "Фадей", "Рубен", "Гаврило", "Прокіп", "Рюрик", "Богдан", "Вікентій", "Назар", "Михей", "Ярослав", "Степан", "Олександр", "Євдоким", "Гліб", "Макар", "Нестор", "Максим", "Ізяслав", "Євлампій", "Елизар", "Євграф", "Сергій", "Терентій", "Саввелій", "Филимон", "Якуб", "Адріан", "Віталій", "Кондрат", "Мойсей", "Лаврентій", "Прокл", "Владилен", "Василь", "Юрій", "Яким", "Іпатій", "Лавр", "Генадій", "Варфоломій", "В'ячеслав", "Родіон", "Герасим", "Феоктист", "Михайло", "Полікарп", "Філіп", "Станіслав", "Зіновій", "Герман", "Федір", "Порфирій", "Еміль", "Сигізмунд", "Олексій", "Артур", "Кирило", "Гнат", "На Розум", "Йосип", "Сократ", "Артем", "Владлен", "Петро", "Мечислав", "Тимофій", "Максимильян", "Антип", "Мартин", "Леонід", "Никанор", "Короп", "Пімен", "Артемій", "Єфрем", "Олег", "Лук'ян", "Еммануїл", "Ілля", "Онисим", "Давид", "Евстигней", "Аркадій", "Мартьян", "Дмитро", "Іларіон", "Пахом", "Веремій", "Данило", "Семен", "Арсеній", "Антон", "Адам", "Андрон", "Феофан", "Серафим", "Чеслав", "Омелян", "Авдей", "Юхим", "Євген", "Святослав", "Дем'ян", "Кир", "Трохим", "Дементій", "Натан", "Мефодій", "Радислав", "Мирон", "Соломон", "Лев", "Самсон", "Архип", "Юліан", "Ян", "Валерій", "Едуард", "Модест", "Єлисей", "Прохор", "Георгій", "Клавдій", "Севастян", "Панкратій", "Єрофій", "Валер'ян", "Іван", "Агап", "Денис", "Володимир", "Артем", "Данила", "Федот", "Агафон", "Микита", "Савелій", "Анатолій", "Веніамін", "Ростислав", "Венедикт", "Захар", "Тимур", "Аристарх", "Всеслав", "Ернст", "Роман", "Мстислав", "Тихон", "Григорій", "Потап", "Данило", "Інокентій", "Капітон", "Натан", "Филимон", "Валер'ян", "Євген", "Парфен", "Феофан", "Євграф", "Ігор", "Яким", "Борислав", "Авдей", "Інокентій", "Павло", "Анатолій", "Веремій", "Мечислав", "Федір", "Олексій", "Едуард", "Іван", "Осип", "Севастян", "Архип", "Артур", "Леондій", "Макар", "Василь", "Петро", "Дементій", "Кир", "Фадей", "Потап", "Філіп", "Веніамін", "Всеслав", "Сократ", "Самуїл", "Віктор", "Аркадій", "Гаврило", "Мойсей", "Елизар", "Радислав", "Адам", "Іполит", "Володимир", "Харитон", "Остап", "Варфоломій", "Кім", "Роман", "Вацлав", "Мир", "Данило", "Іраклій", "Мефодій", "Марк", "Короп", "Мартин", "Федосій", "Кирило", "Руслан", "Тимофій", "Прокіп", "Ізмаїл", "Феоктист", "Станіслав", "Владислав", "Никон", "Нестор", "Адріан", "Антип" };
                string[] MaleSur = new string[] { "Булатов", "Терещенко", "Медведков", "Ведерников", "Ткаченко", "Катькин", "Колбин", "Безродний", "Шалушкін", "Уастов", "Жічкіний", "Кірілішен", "Доскалієв", "Ячіков", "Чубаров", "Новачків", "Крючков", "Сіянскіх", "Ігнатов", "Янчин", "Ярустовскій", "Фадєєв", "Лігачов", "Фурик", "Водоліїв", "Дорохін", "Анніков", "Рудов", "Бабинов", "Стариков", "Дуванов", "Андропов", "Боварін", "Малафєєв", "Францев", "Бурцев", "Грицьків", "Балабанов", "Агліуллін", "Умаметев", "Шитов", "Иволгин", "Яворів", "Шеповалов", "Распопов", "Льовкін", "Снєгірьов", "Яицкий", "Іванків", "Бобер", "Яганов", "Патрушев", "Крутін", "Антипов", "Шурдук", "Бонч-Бруєвич", "Сенькін", "Геремеш", "Кияк", "Смєхов", "Базаров", "Шушалев", "Язьков", "Рекунов", "Собачкін", "Дімов", "Ярний", "Борзилов", "Кудрі", "Прохоров", "Ярощук", "Туполєв", "Пирогов", "Еромеев", "Буряків", "Панков", "Нігин", "Шіхірін", "Гориславська", "Терегулов", "Панфьоров", "Левченко", "Козаков", "Садиков", "Мамин", "Лисов", "Ягодіч", "Шипіцин", "Рабинович", "Баязов", "Родзянко", "Тичкін", "Чіла", "Іскрицький", "Каценеленбоген", "Смирнов", "Прибилів", "Єшевський", "Цурінов", "Івлєв", "Трифонов", "Анішин", "Яркин", "Шувалов", "Курчин", "Яковенцев", "Хватів", "Родиков", "Коротаєв", "Рясний", "Білозеров", "Караваєв", "Рогозін", "Анікєєв", "Енгаличев", "Яговкін", "Мороцкій", "Саньков", "Мусорін", "Кулібін", "Яфраков", "Яресько", "Таганцев", "Перфильев", "Попков", "Шеляпіної", "Артамонов", "Кетов", "Тянніков", "Андрейченко", "Лутугин", "Ємелін", "Сомов", "Подоров", "Дудинов", "Ябров", "Каракозов", "Чіркаш", "Журбин", "Бікеєв", "Доскалієв", "Щеголев", "Ягідників", "Дасаєв", "Козин", "Лук'яненко", "Перевёртов", "Ільїн", "Самошин", "Яшуков", "Кошляк", "Ентін", "Митрофанов", "Анічков", "Городників", "Янковський", "Астредінов", "Чичеріна", "Савін", "Часом", "Конаков", "Аввакумов", "Корнієнко", "Задорнов", "Шагідзянов", "Яшнов", "Кулактін", "Аношкін", "Челомеїв", "Серпіонов", "Лютов", "Курбатов", "Баренцев", "Гарькін", "Енин", "Липів", "Дешевих", "Тімашов", "Степанков", "Шабанов", "Кізатов", "Поронік", "Поздняков", "Авдієнко", "Хаслік", "Коченков", "Любов", "Цур-Мілен", "Горчаков", "Бабишев", "Целобанов", "Сєров", "Ягнят", "Трапезников", "Печеник", "Шуригін", "Пузаков", "Нікітан", "Шибалов", "Косоруков", "Шагубатов", "Гусельников", "Перевалов", "Богоносців", "Глускиной", "Талалін", "Есаулов", "Шеїн", "Шемякін", "Осипов", "Шарудячи", "Кравчиков", "Ерзов", "Яндуткін", "Ніконов", "Хомколов", "Янпольський", "Машуков", "Івашечкіна", "Лешев", "Богатирьов", "Кашников", "Салагін", "Булдаков", "Шаміло", "Кирилівський", "Яценко", "Апакідзе", "Ярикін", "Кудрін", "Язін", "Новожилов", "П'яних", "Анісімов", "Якимович", "Альохін", "Яковкин", "Евентов", "Ісаков", "Щередін", "Руських", "Бурмакін", "Костомаров", "Болдирєв", "Сучков", "Кузаном", "Моїсеєв", "Капилюшний", "Лагошін", "Ємельяненко", "Андреюшкін", "Манякін", "Ящін", "Татаринов", "Безукладников", "Злобін", "Бакарінцев", "Северин", "Кривчиков", "Ігнатковіч", "Чесноков", "Нагієв", "Каде", "Мозжухін", "Менщіков", "Корнєв", "Сафіюлін", "Худяков", "Аслаханов", "Сиваков", "Бурий", "Яшунін", "Барановський", "Гризлов", "Родін", "Мажов", "Канків", "Котельников", "Яскевич", "Елькін", "Кузькін", "Путілін", "Єфремов", "Дарюшін", "Камкін", "Курочкін", "Ханца", "Воєводін", "Сіясінов", "Пир'єв", "Лачинов", "Кахманова", "Гальцев", "Нутріхін", "Афанасьєв", "Бобильов", "Дудкін", "Суботів", "Магазинер", "Агапов", "Толоконский", "Тен", "Нежданов", "Неделящіхся", "Арнаутов", "Сіліванов", "Ломадуров", "Yoжов", "Еверскій", "Алпатов", "Добролюбов", "Брант", "Ахметов", "Кайназар", "Вінтухов", "Свечников", "Слєпцов", "Пончиків", "Петрищев", "Сусляков", "Антонович", "Кузнецов", "Колвашев", "Званцев", "Хизуватися", "Усоев", "Долгов", "Пярін", "Меліков", "Гріневец", "Автухов", "Дуболазов", "Карасевич", "Мічу", "Январьов", "Бондарчук", "Табаков", "Коломійцев", "Овощніков", "Воронков", "Габулов", "Чернаков", "Фетисов", "Яковіченко", "Туровський", "Бубенцов", "Юрасов", "Грибків", "Дёгтін", "Оболенський", "Екземплярський", "Янутан", "Островерх", "Хейчеев", "Матвєєв", "Юрєнєв", "Рябкін", "Стільників", "Уіцкій", "Ягубскій", "Тюлепов", "Яшіхін", "Семенов", "Морозов", "Набережний", "Філіппов", "Куанишбаев", "Мозковий", "Ямалтдінов", "Горемикін", "Статеві", "Сіян", "Новомейскій", "Каравашкін", "Корольов", "Михальченко", "Головін", "Старцев", "Охремов", "Бабанін", "Беломестов", "Коваль", "Ісаєв", "Мягков", "Токмаков", "Марін", "Булка", "Устинов", "Огарков", "Платонов", "Шадрін", "Коняшев", "Кручинін", "Путятін", "Рошет", "Яцковский", "Тургенєв", "Поліча", "Кувшинов", "Керімбаев", "Канаш", "Водянов", "Лагутов", "Янушковскій", "Кострубато", "Флеров", "Погребняк", "Миков", "Єльцов", "Юдицький", "Кідірбаев", "Корнєєв", "Пєлєвін", "Нюнка", "Теребов", "Чепурін", "Іонів", "Муравйов", "Самсонов", "Шерсть", "Ільюшин", "Чігіркін", "Юдашкін", "Ланцов", "Турфане", "Смишляєв", "Просвіряков", "Костін", "Кондра", "Степашин", "Свалов", "Бакшаєв", "Чучумашев", "Сластніков", "Куришін", "Сєдих", "Кузікін", "Денисов", "Привалов", "Батурин", "Нардін", "Белолипецкий", "Смольянінов", "Прикажчиків", "Заврагін", "Картавий", "Цейдліц", "Серебряков", "Золотарьов", "Гусаров", "Лепехин", "Лаптєв", "Юрнал", "Кайпанов", "Закруткін", "Дябін", "Ясне", "Блантер", "Жуков", "Кузьмич", "Негуторов", "Фінагін", "Молодцов", "Сочеванов", "Сідельників", "Ковальов", "Костюк", "Петрухін", "Куксюк", "Баєва", "Кузик", "Гилева", "Луковников", "Щедрін", "Фененко", "Кураєв", "Кондратов", "Рушник", "Чистяков", "Пересторонін", "Купцов", "Покалюк", "Архаткін", "Лєсков", "Єнютін", "Челомцев", "Лизлов", "Сєрєбров", "Астанков", "Горбунков", "Марченко", "Ураков", "Колотилов", "Капішніков", "Шелепов", "Курсалін", "Горюшин", "Овчинников", "Єгоров", "Лукашенко" };
                string[] FemaleNames = new string[] { "Маргарита", "Поліна", "Юнона", "Аріна", "Євдокія", "Зінаїда", "Анфіса", "Ольга", "Лада", "Вероніка", "Любава", "Світлана", "Рената", "Кароліна", "Лариса", "Стела", "Клара", "Марфа", "Христина", "Агафія", "Лідія", "Алла", "Іраїда", "Майя", "Кіра", "Яніна", "Ізабелла", "Лілія", "Аліса", "Наталя", "Марина", "Ангеліна", "Єфросинія", "Катерина", "Софія", "Ксенія", "Пелагея", "Емма", "Василиса", "Агнія", "Домініка", "Наталія", "Елеонора", "Кохання", "Тамара", "Роза", "Людмила", "Галина", "Всеслава", "Онися", "Інеса", "Броніслава", "Юлія", "Ельвіра", "Надія", "Ліана", "Вікторія", "Зоя", "Варвара", "Віра", "Діна", "Єлизавета", "Анастасія", "Маріанна", "Уляна", "Раїса", "Мілена", "Яна", "Ярослава", "Мирослава", "Євгенія", "Антоніна", "Жанна", "Валентина", "Аза", "Олена", "Ніна", "Римма", "Регіна", "Таїсія", "Злата", "Христина", "Фаїна", "Аліна", "Берта", "Нона", "Владлена", "Дар'я", "Влада", "Оксана", "Марія", "Березня", "Евеліна", "Ірина", "Олександра", "Розалія", "Емілія", "Ізольда", "Рада", "Ганна", "Альбіна", "Інна", "Інга", "Єфросинія", "Тетяна", "Аріадна", "Діана", "Владислава", "Валерія", "Єва", "Ніка", "Анфіса", "Влада", "Лада", "Юлія", "Зінаїда", "Таїсія", "Владлена", "Роза", "Евеліна", "Яніна", "Уляна", "Вікторія", "Христина", "Надія", "Ганна", "Аліса", "Катерина", "Анастасія", "Іраїда", "Діна", "Наталія", "Онися", "Тетяна", "Дар'я", "Єфросинія", "Валерія", "Нона", "Владислава", "Жанна", "Єлизавета", "Клара", "Інна", "Берта", "Антоніна", "Лариса", "Оксана", "Яна", "Алла", "Ольга", "Аріна", "Пелагея", "Маріанна", "Мирослава", "Марія", "Ангеліна", "Любава", "Всеслава", "Злата", "Альбіна", "Олександра", "Варвара", "Наталя", "Регіна", "Інга", "Тамара", "Софія", "Стела", "Вероніка", "Рада", "Кохання", "Олена", "Розалія", "Ізольда", "Маргарита", "Фаїна", "Євгенія", "Єфросинія", "Ліана", "Поліна", "Емма", "Євдокія", "Людмила", "Мілена", "Інеса", "Кіра", "Ніка", "Римма", "Аріадна", "Майя", "Емілія", "Христина", "Агафія", "Валентина", "Лілія", "Марфа", "Ніна", "Рената", "Елеонора", "Лідія", "Ярослава", "Кароліна", "Ксенія", "Броніслава", "Світлана", "Ельвіра", "Березня", "Агнія", "Ізабелла", "Раїса", "Галина", "Марина", "Віра", "Аза", "Василиса", "Зоя", "Аліна", "Ірина", "Юнона", "Діана", "Домініка", "Єва", "Уляна", "Ярослава", "Алла", "Олена", "Віра", "Єлизавета", "Евеліна", "Ганна", "Аза", "Софія", "Ксенія", "Ольга", "Тетяна", "Маргарита", "Ліана", "Любава", "Інна", "Альбіна", "Аріна", "Аліна", "Кіра", "Раїса", "Інеса", "Вероніка", "Рената", "Владислава", "Вікторія", "Кохання", "Валентина", "Єфросинія", "Роза", "Тамара", "Влада", "Розалія", "Світлана", "Рада", "Кароліна", "Владлена", "Наталя", "Всеслава", "Лілія", "Іраїда", "Елеонора", "Броніслава", "Діна", "Майя", "Зоя", "Марія", "Емма", "Березня", "Яніна", "Ізольда", "Онися", "Юлія", "Єва", "Марфа", "Лада", "Євгенія", "Юнона", "Римма", "Яна", "Олександра", "Мирослава", "Злата", "Христина", "Лариса", "Клара", "Аріадна", "Ізабелла", "Христина", "Регіна", "Нона", "Ірина", "Фаїна", "Катерина", "Пелагея", "Людмила", "Діана", "Маріанна", "Анастасія", "Марина", "Євдокія", "Валерія", "Галина", "Берта", "Поліна", "Жанна", "Зінаїда", "Дар'я", "Емілія", "Домініка", "Ангеліна", "Ніка", "Аліса", "Ельвіра", "Анфіса", "Антоніна", "Оксана", "Надія", "Ніна", "Наталія", "Агафія", "Агнія", "Лідія", "Інга", "Мілена", "Таїсія", "Василиса", "Варвара", "Стела", "Єфросинія", "Наталія", "Емма", "Аріна", "Пелагея", "Єфросинія", "Ельвіра", "Вікторія", "Ангеліна", "Евеліна", "Агафія", "Клара", "Березня", "Аліса", "Домініка", "Ярослава", "Регіна", "Антоніна", "Влада", "Євгенія", "Тетяна", "Зінаїда", "Ніка", "Броніслава", "Нона", "Інна", "Владислава", "Кароліна", "Олена", "Іраїда", "Ніна", "Зоя", "Берта", "Людмила", "Світлана", "Тамара", "Мілена", "Анастасія", "Злата", "Поліна", "Рада", "Алла", "Кохання", "Діана", "Єфросинія", "Елеонора", "Альбіна", "Ганна", "Христина", "Ізабелла", "Єлизавета", "Надія", "Всеслава", "Дар'я", "Ліана", "Олександра", "Галина", "Марина", "Мирослава", "Аліна", "Агнія", "Лідія", "Христина", "Лариса", "Валентина", "Ольга", "Євдокія", "Римма", "Лада", "Ізольда", "Єва", "Ірина", "Вероніка", "Софія", "Майя", "Варвара", "Лілія", "Юлія", "Емілія", "Жанна", "Маріанна", "Таїсія", "Оксана", "Діна", "Стела", "Василиса", "Любава", "Яніна", "Марфа", "Аза", "Уляна", "Рената", "Катерина", "Розалія", "Владлена", "Яна", "Аріадна", "Раїса", "Роза", "Анфіса", "Ксенія", "Лідія", "Інга", "Влада", "Лада", "Зінаїда", "Поліна", "Юлія", "Стела", "Ізабелла", "Катерина", "Таїсія", "Марія", "Маргарита", "Броніслава", "Тамара", "Наталя", "Мілена", "Христина", "Христина", "Роза", "Ксенія", "Віра", "Клара", "Римма", "Валентина", "Зоя", "Вероніка", "Ірина", "Алла", "Маріанна", "Фаїна", "Ангеліна", "Аліса", "Надія", "Олександра", "Вікторія", "Ніна", "Яніна", "Юнона", "Ангеліна", "Христина", "Влада", "Всеслава", "Євдокія", "Роза", "Жанна", "Таїсія", "Анастасія", "Єфросинія", "Ельвіра", "Елеонора", "Варвара", "Стела", "Ліана", "Лідія", "Інеса", "Евеліна", "Наталя", "Маргарита", "Емма", "Мілена", "Тамара", "Ксенія", "Оксана", "Берта", "Березня", "Лада" };
                string[] FemaleSur = new string[] { "Шеркова", "Кондратова", "Гусєва", "Близнюк", "Машаріна", "Курзибова", "Куклева", "Снеткова", "Баришнікова", "Родзянко", "Зощенко", "Ковригіна", "Капітанчук", "Старченко", "Вітюгова", "Триндіна", "Дарюшіна", "Грехова", "Амбражевіч", "Баязова", "Путилова", "Меркушева", "Бакшаева", "Есаулова", "Крестьянінова", "Саракаева", "Кандинська", "Колбіна", "Углицька", "Мороцкая", "Остап'юк", "Пічушкіна", "Салтанова", "Карташова", "Дороніна", "Конак", "Ільїна", "Задорожна", "Бруєвича", "Нотович", "Сайтахметова", "Грушецька", "Шамякіна", "Форопонова", "Соніна", "Мілова", "Ярощука", "Крижова", "Яушкіна", "Тихомирова", "Корнєєва", "Кичеєво", "Вінтухова", "Ананьєва", "Дябіна", "Бобра", "Дуранічева", "Алієва", "Белібердіева", "Ягофарова", "Селезньова", "Мельник", "Солдатова", "Есце", "Шкуратова", "Ісмайлова", "Маркелова", "Ликова", "Баренцева", "Авдієнко", "Іонова", "Батрутдінова", "Жукова", "Янчуковская", "Воробйова", "Махнер", "Золотова", "Калініна", "Грекова", "Игошина", "Хомколова", "Салагіна", "Ізотова", "Куняєва", "Воскобойникова", "Шикалова", "Помелова", "Горбункова", "Сіянцева", "Стегнова", "Варенникова", "Фотина", "Воропаєва", "Піменова", "Саламатова", "Симакина", "Талалихіна", "Килимник", "Завразіна", "Лещев", "Чернікова", "Корчагіна", "Кураєва", "Шімякіна", "Сапожнікова", "Хамідулліна", "Шарудячи", "Браславець", "Якутіна", "Нутріхіна", "Тредіаковська", "Акулова", "Михайличенко", "Трофимова", "Леонова", "Якушкіна", "Соломінцева", "Буднікова", "Мухіна", "Домишева", "Катеріночкіна", "Ухтомська", "Яйцеві", "Сіяніна", "Рибакова", "Сіяновіча", "Зубова", "Кушкіна", "Килина", "Колесникова", "Арсеньєва", "Сіянчук", "Машкова", "Шашлова", "Шеломова", "Яблокова", "Лапаева", "Усачова", "Касьянова", "Черкашина", "Кошкова", "Гурина", "Дідова", "Гаголіна", "Лозанова", "Ярова", "Гібазова", "Сінеокова", "Єрохіна", "Кобзєва", "Яльцева", "Твардовська", "Богатирьова", "Борхеса", "Нікологорская", "Полухина", "Мінаєва", "Варфоломєєва", "Ясінська", "Самаріна", "Кравчікова", "Сальникова", "Інькова", "Ястребенецька", "Степанова", "Манторова", "Жічкіна", "Сафронова", "Ивкина", "Лавлинська", "Лілова", "Єремєєва", "Прилуцька", "Ялунін", "Якимович", "Натарова", "Бабишева", "Механтьева", "Вердеревська", "Перфільева", "Ямбаева", "Дудник", "Фурікова", "Будаева", "Оскорбіна", "Боброва", "Глоба", "Семенова", "Разудалова", "Шитова", "Спірьянова", "Кудайбергенова", "Колобова", "Мартюшова", "Козлакова", "Ягафарова", "Серікова", "Казанець", "Вельямінова", "Онипченко", "Лобана", "Байдавлетова", "Лелух", "Ємельянова", "Кодіца", "Кобякова", "Ягренева", "Убиш", "Язькова", "Курчатова", "Балинська", "Конєва", "Глухова", "Францева", "Горбачова", "Ярустовская", "Поліванова", "Шепелєва", "Ярная", "Цвєткова", "Гордєєва", "Усоева", "Ястржембська", "Комбарова", "Труш", "Корнілова", "Баликова", "Яброва", "Сорокіна", "Лобанова", "Шульга", "Шибалова", "Білоконь", "Рябоконь", "Платущіхіна", "Чюлічкова", "Петрова", "Сайбаталова", "Шіхіріна", "Венедиктова", "Сотникова", "Кулешова", "Добриніна", "Ульянова", "Аллілуєва", "Малець", "Терехова", "Фролова", "Козлова", "Козар", "Балдагуева", "Казнова", "Мяукіна", "Шишлова", "Гарифуллина", "Добролюбова", "Мухоморова", "Колодезева", "Капилюшная", "Ігнатенко", "Машир", "Позднякова", "Боярова", "Авдонина", "Ящук", "Курепін", "Куришіна", "Сотова", "Оленева", "Якубова", "Ритова", "Малюгина", "Купревіча", "Гурковская", "Худовекова", "Пистогова", "Божко", "Щітта", "Ліснича", "Етуша", "Скуратова", "Кратенко", "Кабінова", "Давидкин", "Бєломєстнова", "Яшкін", "Олейникова", "Русанова", "Ягубская", "Якуніна", "Вахрушева", "Кулигіна", "Сабанцева", "Половова", "Тьомкіна", "Куваєва", "Челомей", "Бандуркин", "Пода", "Безфамільна", "Поветнікова", "Домаш", "Чернієнко", "Северинова", "Челомцева", "Капшукова", "Яненко", "Мукосеева", "Кабалкина", "Бушуєва", "Храмова", "Купревіч", "Полигалова", "Ельмпт", "Власова", "Фастер", "Бутиліна", "Слукину", "Перевёртова", "Исламова", "Роговська", "Уіцкая", "Ярославцева", "Коновалова", "Лосівська", "Янкевич", "Антоновича", "Яковець", "Горшкова", "Ентіна", "Ажікелямова", "Нізовкін", "Мартинова", "Ячевская", "Желєзнова", "Пожарська", "Цельнер", "Чемериса", "Заседателева", "Ломтева", "Шепкіна", "Емських", "Кувшинова", "Уланова", "Муленко", "Мосенцова", "Гаранина", "Зінов'єва", "Нємцова", "Чіркаш", "Яніцька", "Моряева", "Сарана", "Колонтаєво", "Цекало", "Астредінова", "Гризлова", "Овчинникова", "Яржемковская", "Тімашева", "Осокіна", "Мясникова", "Черенчікова", "Толбугіна", "Теплякова", "Жванець", "Маматова", "Федорова", "Вікаріева", "Дуболазова", "Ярцова", "Казакова", "Каца", "Рощина", "Рагозіна", "Плаксина", "Баришева", "Савкіна", "Бєлікова", "Карюкін", "Набалкіна", "Корбилева", "Тарновецька", "Волинкіна", "Коренева", "Тіпалова", "Полинова", "Чуркіна", "Портнова", "Баринова", "Веточкіна", "Порсева", "Курсаліна", "Бурцева", "Абумайлова", "Аксенчука", "Сергійовича", "Юдіна", "Ярошинська", "Самохіна", "Бугаєва", "Десяткова", "Умаметева", "Шмирёва", "Густокашіна", "Ярикіна", "Каунайте", "Суботіна", "Балаева", "Чічерінова", "Ревягіна", "Веретёнова", "Ясногородська", "Мячина", "Санькова", "Коракова", "Коршикова", "Якшібаева", "Ельчукова", "Яковленко", "Якушкова", "Яблочкина", "Кліменкова", "Безродна", "Гудкова", "Пономарьова", "Циркунова", "Яхина", "Карманова", "Горностаєва", "Оськина", "Сиромятникова", "Маслюк", "Жиганова", "Овощнікова", "Ваніна", "Жутова", "Никанорова", "Ивашева", "Дятлова", "Гріголюка", "Ясинівські", "Андропова", "Коваль", "Петрищева", "Жестакова", "Муравйова", "Чігракова", "Деревскова", "Задорнова", "Петрухіна", "Шурдук", "Новицька", "Сіялова", "Пьянкова", "Кузіна", "Лебедєва", "Чулічкова", "Нікерова", "Яцковська", "Гика", "Місяць", "Балабанова", "Абоймова", "Гаврилова", "Єжова", "Звягіна", "Салькова", "Давидова", "Реутова", "Бітнера", "Миколаївська", "Аминева", "Милорадова", "Яндарбієва", "Яцкевич", "Пермінова", "Бендліна", "Каравашкіна", "Чегодаєва", "Куксюка", "Шіхранова", "Нужнова", "Нирцева", "Сіянскіха", "Кошечкіна", "Лашкина", "Ануфрієва", "Камкина", "Цуцкова", "Кручинина", "Славакова", "Калнберзін", "Дорохіна", "Бура", "Яцкова", "Умская", "Кувикіна", "Розанова", "Углічініна" }; 
                string queryString = "SELECT TOP(1) [AlpinistID]" +
                    "	FROM [Coursework].[dbo].[Alpinists]" +
                    "	ORDER BY [AlpinistID] DESC";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                SqlDataReader reader = command.ExecuteReader();
                Object[] values = new Object[1];
                if (reader.Read())
                {
                    reader.GetValues(values);
                }
                int NewID = 0;
                if (!DBNull.Value.Equals(values[0]))
                {
                    NewID = Convert.ToInt32(values[0]);
                }
                NewID++;

                connection.Close();
                queryString = "SELECT TOP(1) [AlpinistsListID]" +
                    "	FROM [Coursework].[dbo].[AlpinistsList]" +
                    "	ORDER BY [AlpinistsListID] DESC";

                connection.Open();
                command = new SqlCommand(queryString, connection);
                reader = command.ExecuteReader();
                if (reader.Read())
                {
                    reader.GetValues(values);
                }
                int NewID1 = 0;
                if (!DBNull.Value.Equals(values[0]))
                {
                    NewID1 = Convert.ToInt32(values[0]);
                }
                NewID1++;
                connection.Close();

                Random random = new Random();

                DataTable table1 = new DataTable();
                table1.Columns.Add("AlpinistID", typeof(int));
                table1.Columns.Add("FirstName", typeof(string));
                table1.Columns.Add("LastName", typeof(string));
                table1.Columns.Add("Phone", typeof(string));

                DataTable table2 = new DataTable();
                table2.Columns.Add("AlpinistsListID", typeof(int));
                table2.Columns.Add("AlpinistID", typeof(int));
                table2.Columns.Add("AlpinistBaseID", typeof(int));

                for (int i = 0; i < myInt.ID; i++)
                {
                    int sex = random.Next(0, 2);
                    int Base = random.Next(1, 4);
                    string tel = "0" + random.Next(0, 9) + random.Next(0, 9) + "-" +
                        random.Next(0, 9) + random.Next(0, 9) + random.Next(0, 9) +
                        "-" + random.Next(0, 9) + random.Next(0, 9) + "-" + random.Next(0, 9) + random.Next(0, 9);
                    if (sex == 0)
                    {
                        table1.Rows.Add(new object[]
                        {
                            NewID + i,
                            FemaleNames[random.Next(0, FemaleNames.Length)],
                            FemaleSur[random.Next(0, FemaleSur.Length)],
                            tel
                        }
                        );
                    }

                    if (sex == 1)
                    {
                        table1.Rows.Add(new object[]
                        {
                            NewID + i,
                            MaleNames[random.Next(0, MaleNames.Length)],
                            MaleSur[random.Next(0, MaleSur.Length)],
                            tel
                        }
                        );
                    }

                    table2.Rows.Add(new object[]
                        {
                            NewID1 + i,
                            NewID + i,
                            Base
                        }
                        );
                }

                connection.Open();
                SqlBulkCopy bulkCopy1 = new SqlBulkCopy(connection);
                bulkCopy1.DestinationTableName = "[Alpinists]";
                bulkCopy1.WriteToServer(table1);
                connection.Close();

                connection.Open();
                SqlBulkCopy bulkCopy2 = new SqlBulkCopy(connection);
                bulkCopy1.DestinationTableName = "[AlpinistsList]";
                bulkCopy1.WriteToServer(table2);
                connection.Close();

                ViewBag.MyID = 1;
                return View(myInt);
            }
            ViewBag.MyID = -1;
            return View(myInt);
        }

        public ActionResult GenerateFoodOrders()
        {
            ViewBag.MyID = 0;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GenerateFoodOrders([Bind(Include = "ID")] MyInt myInt)
        {
            if (ModelState.IsValid && myInt.ID > 0 && myInt.ID < 100000)
            {
                string queryString = "SELECT TOP(1) [FoodOrderID]" +
                    "	FROM [Coursework].[dbo].[FoodOrders]" +
                    "	ORDER BY [FoodOrderID] DESC";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                SqlDataReader reader = command.ExecuteReader();
                Object[] values = new Object[1];
                if (reader.Read())
                {
                    reader.GetValues(values);
                }
                int NewID = 0;
                if (!DBNull.Value.Equals(values[0]))
                {
                    NewID = Convert.ToInt32(values[0]);
                }
                NewID++;
                connection.Close();

                queryString = "SELECT [AlpinistID]" +
                    "	FROM [Coursework].[dbo].[AlpinistsList]";

                connection.Open();
                command = new SqlCommand(queryString, connection);
                reader = command.ExecuteReader();
                List<int> list = new List<int>();
                while(reader.Read())
                {
                    Object[] values1 = new Object[1];
                    reader.GetValues(values1);
                    list.Add(Convert.ToInt32(values1[0]));
                }
                connection.Close();

                Random random = new Random();

                DataTable table1 = new DataTable();
                table1.Columns.Add("FoodOrderID", typeof(int));
                table1.Columns.Add("AlpinistID", typeof(int));
                table1.Columns.Add("FoodTypeID", typeof(int));
                table1.Columns.Add("Date", typeof(DateTime));
                if (list.Count == 0)
                {
                    ViewBag.MyID = -1;
                    return View(myInt);
                }
                for (int i = 0; i < myInt.ID; i++)
                {
                    table1.Rows.Add(new object[]
                    {
                            NewID + i,
                            list[random.Next(0, list.Count)],
                            random.Next(1, 4),
                            RandomDay(random)
                    }
                    );
                }
                

                connection.Open();
                SqlBulkCopy bulkCopy1 = new SqlBulkCopy(connection);
                bulkCopy1.DestinationTableName = "[FoodOrders]";
                bulkCopy1.WriteToServer(table1);
                connection.Close();

                ViewBag.MyID = 1;
                return View(myInt);
            }
            ViewBag.MyID = -1;
            return View(myInt);
        }

        public ActionResult GenerateHouseOrders()
        {
            ViewBag.MyID = 0;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GenerateHouseOrders([Bind(Include = "ID")] MyInt myInt)
        {
            if (ModelState.IsValid && myInt.ID > 0 && myInt.ID < 100000)
            {
                string queryString = "SELECT TOP(1) [HouseOrderID]" +
                    "	FROM [Coursework].[dbo].[HouseOrders]" +
                    "	ORDER BY [HouseOrderID] DESC";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                SqlDataReader reader = command.ExecuteReader();
                Object[] values = new Object[1];
                if (reader.Read())
                {
                    reader.GetValues(values);
                }
                int NewID = 0;
                if (!DBNull.Value.Equals(values[0]))
                {
                    NewID = Convert.ToInt32(values[0]);
                }
                NewID++;
                connection.Close();

                queryString = "SELECT [AlpinistID], [AlpinistBaseID]" +
                    "	FROM [Coursework].[dbo].[AlpinistsList]";

                connection.Open();
                command = new SqlCommand(queryString, connection);
                reader = command.ExecuteReader();

                List<MyAlp> list = new List<MyAlp>();
                while (reader.Read())
                {
                    Object[] values1 = new Object[2];
                    reader.GetValues(values1);

                    MyAlp myAlp = new MyAlp();
                    myAlp.int1 = Convert.ToInt32(values1[0]);
                    myAlp.int2 = Convert.ToInt32(values1[1]);

                    list.Add(myAlp);
                }
                connection.Close();

                queryString = "SELECT [HouseID], [AlpinistBaseID]" +
                    "	FROM [Coursework].[dbo].[Houses]";

                connection.Open();
                command = new SqlCommand(queryString, connection);
                reader = command.ExecuteReader();

                List<MyAlp> list1 = new List<MyAlp>();
                while (reader.Read())
                {
                    Object[] values1 = new Object[2];
                    reader.GetValues(values1);

                    MyAlp myAlp = new MyAlp();
                    myAlp.int1 = Convert.ToInt32(values1[0]);
                    myAlp.int2 = Convert.ToInt32(values1[1]);

                    list1.Add(myAlp);
                }
                connection.Close();
                if (list.Count == 0 || list1.Count == 0)
                {
                    ViewBag.MyID = -1;
                    return View(myInt);
                }
                Random random = new Random();

                DataTable table1 = new DataTable();
                table1.Columns.Add("HouseOrderID", typeof(int));
                table1.Columns.Add("AlpinistID", typeof(int));
                table1.Columns.Add("HouseID", typeof(int));
                table1.Columns.Add("DateStart", typeof(DateTime));
                table1.Columns.Add("DateEnd", typeof(DateTime));

                for (int i = 0; i < myInt.ID; i++)
                {
                    MyAlp int3 = list[random.Next(0, list.Count)];
                    DateTime date = RandomDay(random);
                    IEnumerable<int> Query =
                        from house in list1
                        where house.int2 == int3.int2
                        select house.int1;
                    List<int> list2 = Query.ToList();
                    table1.Rows.Add(new object[]
                    {
                            NewID + i,
                            int3.int1,
                            list2[random.Next(0, list2.Count)],
                            date,
                            RandomDay(random, date)
                    }
                    );
                }


                connection.Open();
                SqlBulkCopy bulkCopy1 = new SqlBulkCopy(connection);
                bulkCopy1.DestinationTableName = "[HouseOrders]";
                bulkCopy1.WriteToServer(table1);
                connection.Close();

                ViewBag.MyID = 1;
                return View(myInt);
            }
            ViewBag.MyID = -1;
            return View(myInt);
        }

        public ActionResult GenerateWalks()
        {
            ViewBag.MyID = 0;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GenerateWalks([Bind(Include = "ID")] MyInt myInt)
        {
            if (ModelState.IsValid && myInt.ID > 0 && myInt.ID < 100000)
            {
                string queryString = "SELECT TOP(1) [WalkID]" +
                    "	FROM [Coursework].[dbo].[Walks]" +
                    "	ORDER BY [WalkID] DESC";
                SqlConnection connection = new SqlConnection(@"Data Source = VALENTINE\SQLEXPRESS;
                    Initial Catalog = Coursework; Integrated Security = True");
                connection.Open();
                SqlCommand command = new SqlCommand(queryString, connection);
                SqlDataReader reader = command.ExecuteReader();
                Object[] values = new Object[1];
                if (reader.Read())
                {
                    reader.GetValues(values);
                }
                int NewID = 0;
                if (!DBNull.Value.Equals(values[0]))
                {
                    NewID = Convert.ToInt32(values[0]);
                }
                NewID++;
                connection.Close();

                queryString = "SELECT [AlpinistID], [AlpinistBaseID]" +
                    "	FROM [Coursework].[dbo].[AlpinistsList]";

                connection.Open();
                command = new SqlCommand(queryString, connection);
                reader = command.ExecuteReader();

                List<MyAlp> list = new List<MyAlp>();
                while (reader.Read())
                {
                    Object[] values1 = new Object[2];
                    reader.GetValues(values1);

                    MyAlp myAlp = new MyAlp();
                    myAlp.int1 = Convert.ToInt32(values1[0]);
                    myAlp.int2 = Convert.ToInt32(values1[1]);

                    list.Add(myAlp);
                }
                connection.Close();

                queryString = "SELECT [RouteID], [AlpinistBaseID]" +
                    "	FROM [Coursework].[dbo].[Routes]";

                connection.Open();
                command = new SqlCommand(queryString, connection);
                reader = command.ExecuteReader();

                List<MyAlp> list1 = new List<MyAlp>();
                while (reader.Read())
                {
                    Object[] values1 = new Object[2];
                    reader.GetValues(values1);

                    MyAlp myAlp = new MyAlp();
                    myAlp.int1 = Convert.ToInt32(values1[0]);
                    myAlp.int2 = Convert.ToInt32(values1[1]);

                    list1.Add(myAlp);
                }
                connection.Close();
                if (list.Count == 0 || list1.Count == 0)
                {
                    ViewBag.MyID = -1;
                    return View(myInt);
                }
                Random random = new Random();

                DataTable table1 = new DataTable();
                table1.Columns.Add("WalkID", typeof(int));
                table1.Columns.Add("AlpinistID", typeof(int));
                table1.Columns.Add("RouteID", typeof(int));
                table1.Columns.Add("DateStart", typeof(DateTime));
                table1.Columns.Add("DateEnd", typeof(DateTime));

                for (int i = 0; i < myInt.ID; i++)
                {
                    MyAlp int3 = list[random.Next(0, list.Count)];
                    DateTime date = RandomDay(random);
                    IEnumerable<int> Query =
                        from house in list1
                        where house.int2 == int3.int2
                        select house.int1;
                    List<int> list2 = Query.ToList();
                    table1.Rows.Add(new object[]
                    {
                            NewID + i,
                            int3.int1,
                            list2[random.Next(0, list2.Count)],
                            date,
                            RandomDay(random, date, 0)
                    }
                    );
                }


                connection.Open();
                SqlBulkCopy bulkCopy1 = new SqlBulkCopy(connection);
                bulkCopy1.DestinationTableName = "[Walks]";
                bulkCopy1.WriteToServer(table1);
                connection.Close();

                ViewBag.MyID = 1;
                return View(myInt);
            }
            ViewBag.MyID = -1;
            return View(myInt);
        }
    }
}